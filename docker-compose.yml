services:
  kafka1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka1
    hostname: kafka1
    ports:
      # Port zewnętrzny dla kafka1 (dostęp z hosta)
      - "19092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      # INTERNAL: komunikacja między brokerami w sieci Docker
      # CONTROLLER: komunikacja kworum KRaft w sieci Docker
      # EXTERNAL: komunikacja z klientami spoza sieci Docker (np. z hosta)
      KAFKA_LISTENERS: 'INTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,EXTERNAL://0.0.0.0:29092'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka1:9092,EXTERNAL://localhost:19092'
      # KAFKA_CONTROLLER_QUORUM_VOTERS musi być taki sam dla wszystkich brokerów/kontrolerów
      # Format: node_id1@host1:port1,node_id2@host2:port2,...
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL' # Brokerzy używają tego listenera do komunikacji
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3    # Dla klastra 3-brokerowego
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3 # Dla klastra 3-brokerowego
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2        # Zalecane: liczba replik - 1
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      CLUSTER_ID: 'BxjYKgPRRhesdIxbW4R5pw' # <--- !!! UŻYJ TEGO SAMEGO ID DLA WSZYSTKICH BROKERÓW !!!
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - kafka1-data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka1:9092 --list || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 10 # Zwiększone retries dla stabilizacji klastra
      start_period: 60s # Dłuższy czas na start klastra

  kafka2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka2
    hostname: kafka2
    ports:
      # Port zewnętrzny dla kafka2 (dostęp z hosta)
      - "19093:29093"
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,EXTERNAL://0.0.0.0:29093'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka2:9092,EXTERNAL://localhost:19093'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      CLUSTER_ID: 'BxjYKgPRRhesdIxbW4R5pw' # <--- !!! UŻYJ TEGO SAMEGO ID DLA WSZYSTKICH BROKERÓW !!!
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - kafka2-data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka2:9092 --list || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  kafka3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka3
    hostname: kafka3
    ports:
      # Port zewnętrzny dla kafka3 (dostęp z hosta)
      - "19094:29094"
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT'
      KAFKA_LISTENERS: 'INTERNAL://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,EXTERNAL://0.0.0.0:29094'
      KAFKA_ADVERTISED_LISTENERS: 'INTERNAL://kafka3:9092,EXTERNAL://localhost:19094'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka1:9093,2@kafka2:9093,3@kafka3:9093'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'INTERNAL'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 2
      KAFKA_MIN_INSYNC_REPLICAS: 2
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_LOG_DIRS: '/var/lib/kafka/data'
      CLUSTER_ID: 'BxjYKgPRRhesdIxbW4R5pw' # <--- !!! UŻYJ TEGO SAMEGO ID DLA WSZYSTKICH BROKERÓW !!!
      CONFLUENT_METRICS_ENABLE: 'false'
      CONFLUENT_SUPPORT_METRICS_ENABLE: 'false'
      KAFKA_HEAP_OPTS: "-Xms512m -Xmx512m"
    volumes:
      - kafka3-data:/var/lib/kafka/data
    healthcheck:
      test: [ "CMD-SHELL", "kafka-topics --bootstrap-server kafka3:9092 --list || exit 1" ]
      interval: 15s
      timeout: 10s
      retries: 10
      start_period: 60s

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080" # Expose Kafka UI on host port 8080
    depends_on:
      kafka1:
        condition: service_healthy # Wait for Kafka to be healthy
      kafka2:
        condition: service_healthy # Wait for Kafka to be healthy
      kafka3:
        condition: service_healthy # Wait for Kafka to be healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: 'Local KRaft Kafka'
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: 'kafka1:9092,kafka2:9093,kafka3:9094' # Connect to Kafka using its service name
      KAFKA_CLUSTERS_0_KRAFTENABLED: 'true' # Crucial for KRaft
      # Optional: if you want to use JMX metrics (requires Kafka JMX port to be open and configured)
      # KAFKA_CLUSTERS_0_JMXPORT: 9997
      # KAFKA_CLUSTERS_0_READONLY: "false" # Allow write operations from UI
      DYNAMIC_CONFIG_ENABLED: 'true' # To allow some configurations via UI
    restart: on-failure


  kafka-topic-creator:
    image: confluentinc/cp-kafka:latest # Use the same Kafka image as it contains the necessary tools
    container_name: kafka-topic-creator
    depends_on:
      kafka1:
        condition: service_healthy # Wait for Kafka to be healthy
      kafka2:
        condition: service_healthy # Wait for Kafka to be healthy
      kafka3:
        condition: service_healthy # Wait for Kafka to be healthy
    command: >
      sh -c "
        echo 'Waiting a few seconds for Kafka to be fully ready after healthcheck...' &&
        sleep 5 && \
        echo 'Attempting to create topic: app-execute_stuff-command' &&
        kafka-topics --bootstrap-server kafka1:9092 --create --topic app-execute_stuff-command --partitions 3 --replication-factor 3 --if-not-exists && echo 'Topic creation command executed successfully.' || echo 'Topic creation command failed.'
        kafka-topics --bootstrap-server kafka1:9092 --describe --topic app-execute_stuff-command
        echo 'Attempting to create topic: app-stuff_executed-event' &&
        kafka-topics --bootstrap-server kafka1:9092 --create --topic app-stuff_executed-event --partitions 3 --replication-factor 3 --if-not-exists && echo 'Topic creation command executed successfully.' || echo 'Topic creation command failed.'
        kafka-topics --bootstrap-server kafka1:9092 --describe --topic app-stuff_executed-event
      "
    restart: 'no' # This service should run once and then exit. It won't restart if it completes successfully.


volumes:
  kafka1-data:
  kafka2-data:
  kafka3-data: